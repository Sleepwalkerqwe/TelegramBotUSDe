import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import httpx

# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_—Å—é–¥–∞"
CHAT_ID = 870085433

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üìä –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∏–∑ API
async def get_price():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=usde&vs_currencies=usd"
    async with httpx.AsyncClient() as client:
        response = await client.get(url)
        data = response.json()
        return data["usde"]["usd"]

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /startalert n y
async def startalert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        n = int(context.args[0])  # –∫–∞–∂–¥—ã–µ n –º–∏–Ω—É—Ç
        y = int(context.args[1])  # –≤ —Ç–µ—á–µ–Ω–∏–µ y –º–∏–Ω—É—Ç
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /startalert <–∫–∞–∂–¥—ã–µ_—Å–∫–æ–ª—å–∫–æ_–º–∏–Ω—É—Ç> <–≤_—Ç–µ—á–µ–Ω–∏–µ_—Å–∫–æ–ª—å–∫–∏_–º–∏–Ω—É—Ç>")
        return

    await update.message.reply_text(f"–û–∫! –ë—É–¥—É —Å–ª–∞—Ç—å –∫—É—Ä—Å –∫–∞–∂–¥—ã–µ {n} –º–∏–Ω—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ {y} –º–∏–Ω—É—Ç.")

    # –ó–∞–ø—É—Å—Ç–∏–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(send_price_periodically(n, y))

# üì¶ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
async def send_price_periodically(n, y):
    total_runs = y * 60 // (n * 60)  # —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (–Ω–æ –ø—Ä–æ—â–µ —Å—á–∏—Ç–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    end_time = asyncio.get_event_loop().time() + y * 60

    while asyncio.get_event_loop().time() < end_time:
        price = await get_price()
        text = f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å USDe: {price} USD"
        await app.bot.send_message(chat_id=CHAT_ID, text=text)
        await asyncio.sleep(n * 60)

# üèÅ main
async def main():
    global app
    app = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("startalert", startalert))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
