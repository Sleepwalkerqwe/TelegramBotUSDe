import asyncio
import logging
from telegram.ext import Application, CommandHandler
import httpx

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8461719065:AAGJPOCpt6mWeb8k0rUEQIfdqtuFBAId5SY"   # —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
CHAT_ID = 870085433
THRESHOLD = 0.98

logging.basicConfig(level=logging.INFO)

async def get_price():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=ethena-usde&vs_currencies=usd"
    try:
        async with httpx.AsyncClient(timeout=60) as client:
            response = await client.get(url)
            if response.status_code == 429:
                logging.warning("–ü–æ–ª—É—á–µ–Ω 429 Too Many Requests –æ—Ç CoinGecko. –î–µ–ª–∞–µ–º –ø–∞—É–∑—É...")
                await asyncio.sleep(10)  # –ø–∞—É–∑–∞ –ø–æ–¥–æ–ª—å—à–µ –ø—Ä–∏ 429
                return None
            response.raise_for_status()
            data = response.json()

            return data["ethena-usde"]["usd"]
    except httpx.RequestError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ CoinGecko: {e}")
        return None
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return None

# üéØ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–∞
async def monitor_price(app):
    while True:
        price = await get_price()
        if price is not None:
            logging.info(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {price}")
            if price < THRESHOLD:
                text = f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ö—É—Ä—Å —É–ø–∞–ª –Ω–∏–∂–µ {THRESHOLD} USD!\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {price} USD"
                await app.bot.send_message(chat_id=CHAT_ID, text=text)
            await asyncio.sleep(5)  # —Ö–æ—Ç—è –±—ã 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        else:
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞, –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ–ª—å—à–µ
            await asyncio.sleep(10)

# üïí –ö–æ–º–∞–Ω–¥–∞: /price_loop n y
async def price_loop_handler(update, context):
    try:
        n = int(context.args[0])  # –∫–∞–∂–¥—ã–µ n –º–∏–Ω—É—Ç
        y = int(context.args[1])  # –≤ —Ç–µ—á–µ–Ω–∏–µ y –º–∏–Ω—É—Ç
        asyncio.create_task(send_price_periodically(n, y, context.application))
        await update.message.reply_text(f"–ë—É–¥—É —Å–ª–∞—Ç—å –∫—É—Ä—Å –∫–∞–∂–¥—ã–µ {n} –º–∏–Ω—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ {y} –º–∏–Ω—É—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /price_loop: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /price_loop n y")

# üì¶ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—Å–∞ –∫–∞–∂–¥—ã–µ n –º–∏–Ω—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ y –º–∏–Ω—É—Ç
async def send_price_periodically(n, y, app):
    end_time = asyncio.get_event_loop().time() + y * 60
    while asyncio.get_event_loop().time() < end_time:
        try:
            price = await get_price()
            text = f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å USDe: {price} USD"
            await app.bot.send_message(chat_id=CHAT_ID, text=text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É—Ä—Å–∞: {e}")
        await asyncio.sleep(n * 60)

if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("price_loop", price_loop_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—É—Ä—Å–∞, –∫–æ–≥–¥–∞ –±–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç
    async def on_startup(app):
        asyncio.create_task(monitor_price(app))
    app.post_init = on_startup

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –∫—É—Ä—Å–æ–º")
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling **–±–µ–∑** asyncio.run()
    app.run_polling()